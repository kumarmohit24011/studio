
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUserAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isUserAuthenticated() && (isOwner(userId) || isUserAdmin(request.auth.uid));
      allow write: if isUserAuthenticated() && isOwner(userId);
    }

    match /products/{productId} {
      allow read: if true;
      allow write: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
    }
    
    match /coupons/{couponId} {
        allow read: if true; // Coupons can be public
        allow write: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
    }

    match /orders/{orderId} {
      allow read: if isUserAuthenticated() && (isOwner(resource.data.userId) || isUserAdmin(request.auth.uid));
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
      allow delete: if false;
    }

    match /settings/{settingId} {
      allow read: if true;
      allow write: if isUserAuthenticated() && isUserAdmin(request.auth.uid);
    }
  }
}
