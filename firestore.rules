
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    // Helper function to check if user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Products: Public read, Admin write
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Categories: Public read, Admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Coupons: Admin only access
    match /coupons/{couponId} {
      allow read, write: if isAdmin();
    }

    // Users: Users can read/write their own data. Admins can read anyone's data.
    match /users/{userId} {
      allow read: if (isSignedIn() && request.auth.uid == userId) || isAdmin();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && request.auth.uid == userId;
      // No delete for user profiles through client
      allow delete: if false; 
    }

    // Orders: Users can create and read their own. Admins can read/update all.
    match /orders/{orderId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read: if (isSignedIn() && resource.data.userId == request.auth.uid) || isAdmin();
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // Site Content (Hero, Promos, etc.): Public read, Admin write
    match /siteContent/{contentId} {
        allow read: if true;
        allow write: if isAdmin();
    }
  }
}
