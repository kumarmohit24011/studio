
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    match /users/{userId} {
      // Users can read and create their own profile.
      // Admins can read any profile.
      allow read, create: if isOwner(userId) || isAdmin();
      
      // Users can update their own profile, but cannot change their email or admin status.
      allow update: if isOwner(userId)
                    && request.resource.data.email == resource.data.email
                    && request.resource.data.isAdmin == resource.data.isAdmin;
    }

    // Products and Categories should be world-readable for the storefront.
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Site content is public, but only writable by admins.
    match /siteContent/global {
       allow read: if true;
       allow write: if isAdmin();
    }
    
    // Authenticated users can read a coupon to verify it. Admins can manage them.
    match /coupons/{couponId} {
        allow get: if request.auth != null;
        allow list, write: if isAdmin();
    }

    // Orders should only be accessible by the user who created them or by an admin.
    match /orders/{orderId} {
      // User can create their own order.
      allow create: if isOwner(request.resource.data.userId);
      // User can read their own orders. Admins can read any order.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Only admins can update orders (e.g., change status).
      allow update: if isAdmin();
      // No one should delete orders for data integrity.
      allow delete: if false;
    }
  }
}
