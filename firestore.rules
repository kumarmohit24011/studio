
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // A user can only update the 'stock' field of a product.
    function isUpdatingStockOnly() {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']);
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId);
      allow list: if isAdmin();
    }

    match /products/{productId} {
      allow read: if true;
      // Admins can create, update (any field), and delete products.
      allow create, delete: if isAdmin();
      // Any authenticated user can update a product IF they are only changing the stock.
      // Admins can update any field.
      allow update: if (isAuthenticated() && isUpdatingStockOnly()) || isAdmin();
    }

    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /coupons/{couponId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    match /orders/{orderId} {
      // User can create their own order.
      allow create: if isOwner(request.resource.data.userId);
      // User can read their own orders. Admins can read all orders.
      allow read: if isOwner(resource.data.userId) || isAdmin();
      // Admins can manage all orders.
      allow list, update, delete: if isAdmin();
    }

    match /settings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
