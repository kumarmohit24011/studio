rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuth() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isValidImage() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size <= 10 * 1024 * 1024; // 10MB limit
    }

    // Allow public read access to all files (for e-commerce product images)
    match /{allPaths=**} {
      allow read;
    }

    // Admin-only write access for hero images
    match /hero-images/{imageId} {
      allow write: if isAdmin() && isValidImage();
    }
    
    // Admin-only write access for promotional images
    match /promo-images/{imageId} {
      allow write: if isAdmin() && isValidImage();
    }
    
    // Admin-only write access for product images
    match /products/{productId} {
      allow write: if isAdmin() && isValidImage();
    }
    
    // Admin-only write access for category images
    match /categories/{categoryId} {
      allow write: if isAdmin() && isValidImage();
    }
    
    // User profile images - users can upload their own
    match /users/{userId}/profile.{ext} {
      allow write: if isAuth() && request.auth.uid == userId && isValidImage();
    }
    
    // Deny all other write operations
    match /{allPaths=**} {
      allow write: if false;
    }
  }
}
